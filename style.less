@nice-blue: #5B83AD;
@light-blue: @nice-blue + #111;

#header {
  color: @light-blue;
  .navigation {
   font-size: 12px;
  }
 .logo {
   width: 300px;
 }
}

.bordered {
  border-top: dotted 1px black;
  border-bottom: solid 2px black;
}

#menu a {
  color: #111;
  .bordered;
}

.post a {
  color: red;
  .bordered;
}

.class { width: (1 + 1) }

// The & operator represents the parent selector


.link {
  &:hover {
    color: green;
  }
  & + & {
    color: red;
  }

  & & {
    color: green;
  }

  && {
    color: blue;
  }

  &, &ish {
    color: cyan;
  }
}

p, a, ul, li {
  border-top: 2px dotted #366;
  & + & {
    border-top: 0;
  }
}


#bundle {
  .button {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &:hover {
      background-color: white
    }
  }
}

#header a {
  color: orange;
  #bundle > .button;
}



// Variables
@my-selector: banner;

// Usage
.@{my-selector} {
  font-weight: bold;
  line-height: 40px;
  margin: 0 auto;
}

// Variables
@images: "../img";
// Usage
body {
  color: #444;
  background: url("@{images}/white-sand.png");
}



// Extends
.a{
  color:#EFEFEF;
}

.b{
  background-color:#FFFFFF;
}

.c{
  margin-left: auto;
}

.d{
  background-color:#FFFFFF;
}

.a:extend(.b,.c){}



// all operator
.a.b.test,
.test.c {
  color: orange;
}
.test {
  &:hover {
    color: green;
  }
}

.replacement:extend(.test all) {}


//MIXINS
.my-hover-mixin() {
  &:hover {
    border: 1px solid red;
  }
  .testing-sub{
    color:#EFEFEF;
  }
}
button {
  .my-hover-mixin();
}

// Important with Mixins
.foo (@bg: #f5f5f5, @color: #900) {
 background: @bg;
 color: @color;
}
.unimportant {
 .foo();
}
.important {
 .foo() !important;
}
